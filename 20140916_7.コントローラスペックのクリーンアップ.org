
* 7. コントローラスペックのクリーンアップ

前章まではあまり重複や壊れやすさを考慮していなかった。
この章では重複をなくし、スペックを壊れにくくする三つの方法を紹介する。

** Shared examples

 * 100 パーセント DRY であることよりも、読みやすいスペックになっている
   ことの方が重要であると今まで明言してきた
 * ただ限界がある
   * 今までの例だと、管理者、ゲスト、一般ユーザでサンプルが重複してい
     るところがあった

RSpec では shared examples という便利な機能を使ってこうした重複をなく
すことができる

#+begin_src ruby
  shared_examples("public access to contacts") do
    describe 'GET #index' do
      # 連絡先を配列にまとめること
      it "populates an array of contacts" do
        get :index
        expect(assigns(:contacts)).to match_array [@contact]
      end

      # :index テンプレートを表示すること
      it "renders the :index template" do
        get :index
        expect(response).to render_template :index
      end
    end

    describe 'GET #show' do
      # @contact に要求された連絡先を割り当てること
      it "assigns the requested contact to @contact" do
        get :show, id: @contact
        expect(assigns(:contact)).to eq @contact
      end
      # :show テンプレートを表示すること
      it "renders the :show template" do
        get :show, id: @contact
        expect(response).to render_template :show
      end
    end
  end
#+end_src

example を使いたい describe ブロック、もしくは context ブロックにこの
内容をインクルードする。

#+begin_src ruby
  describe "guest access" do
    it_behaves_like "public access to contacts"
    # ゲストがアクセスした場合のスペックが続く ...
  end
#+end_src

これによってスペックがずいぶんとすっきりする。

#+begin_src ruby
  describe "user access to contacts" do
    before :each do
      set_user_session(create(:user))
    end
    it_behaves_like "public access to contacts"
    it_behaves_like "full access to contacts"
  end
#+end_src

** ヘルパーマクロを作成する

RSpec の マクロ(macro)を利用すれば簡単にテストスイート全体で使われるメ
ソッドを定義できる。

通常は spec/support以下に作成し、RSpec の設定でモジュールとしてイン
クルードする。

#+begin_src ruby
  module LoginMacros
    def set_user_session(user)
      session[:user_id] = user.id
    end
  end
#+end_src

spec/spec_helper.rb でマクロを読込む。

#+begin_src ruby
  Dir[Rails.root.join("spec/support/**/*.rb")].each {|f| require f}

  RSpec.configure do |config|
    # 他の RSpec の設定は省略します ...
    config.include LoginMacros
  end
#+end_src

マクロが使えるようになる。

#+begin_src ruby
  describe "admin access" do
    before :each do
      set_user_session create(:admin)
    end
    it_behaves_like "public access to contacts"
    it_behaves_like "full access to contacts"
  end
#+end_src

** カスタム RSpec マッチャを使う

標準マッチャで十分かもしれないが、カスタムマッチャを使うと可読性が上る
かもしれない。以下 require_loing というカスタムマッチャを定義する例。

#+begin_src ruby
  RSpec::Matchers.define :require_login do |expected|
    match do |actual|
      expect(actual).to redirect_to Rails.application.routes.url_helpers.login_path
    end
    failure_message_for_should do |actual|
      "expected to require login to access the method"
    end
    failure_message_for_should_not do |actual|
      "expected not to require login to access the method"
    end
    description do
      "redirect to the login form"
    end
  end
#+end_src

 * match に渡すブロックに期待する動作を記述
 * shoud/shoud_not の失敗時メッセージを定義
 * 説明

#+begin_src ruby
  describe 'GET #new' do
    # ログインを要求すること
    it "requires login" do
      get :new
      expect(response).to require_login
    end
  end
#+end_src

** まとめ

 * コントローラスペックを無視すべきではないのと同様、責任を持ってコン
   トローラスペックをきれいにしておくことも忘れないように
 * コントローラレベルのテストがあれば大きなコストをかけずにコードベー
   スの大部分を信頼できるようになる
 * 次は統合テスト
